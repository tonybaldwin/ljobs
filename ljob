#!/bin/bash

##############################################################
# ljobs                                                      #
# language jobs management in bash by tony baldwin           #
# http://tonyb.us/ljobs                                      #
# released according to the terms of the GNU GPL v.3 or later#
##############################################################

source ~/.ljobs.conf

filedate=$(date +%Y%m%d%H%M%S)
cd $ljpath

if [[ $1 = r ]]; then
	if [[ $2 ]]; then
		cat $2*.ljob | less
	else
		for i in $(ls -Rt *.ljob); do cat $i; done | less
	fi
else
if [[ $1 = d ]]; then
	read -p "Are you certain you wish to delete $2? (y/n)" yesdel
	if [[ $yesdel == "y" ]];
		then rm $2
		echo "$2 deleted."
	else
		echo "$2 not deleted."
	fi
else
if [[ $1 = h || -z $1 ]]; then
	echo "ljob - language service provider jobs data management tool in bash by tony baldwin - http://tonyb.us/ljobs
	-----------------------------------------------------------------------------------------
ljob n - creates a new ljob file (automatic assignment of filename).
ljob n filename - creates new job file with \"filename\" as the name. filename must begin with date parameters (YYYYMMDD) for other functions to work properly!
ljob e - opens a file for editing. MUST specify full file name (i.e. ljob e 20121031082439.ljob)
ljob d filename - delete file \"filename\". Must use full filename.
ljob v - view file. Must specify full file name (i.e. ljob v 201203241542.exp)
ljob r - reads all entries (cats all files in the dir, pipes to less)
ljob r yyyymmdd - reads job entries from date yyyymmdd. One can specify just yyyymm, or just yyyy, even.
ljob l - lists everything in ljob's directory (reports, jobs, expenses, etc.)
ljob lj - lists all ljob entries. Like r, it can be narrowed down with date parameters.
ljob lo - list only jobs with outsourcing; can be limited to date parameters.
ljob lr - lists all monthly and yearly reports. Can be limited with date parameters.
ljob lx - lists expense reports. Can be limited with date parameters.
ljob pm - enter a new payment received.
ljob lp - list payments (can be limited with data parameters).
ljob pr - read payments/income report (limit with data parameters).
ljob s searchterm - searches for searchterm in dream entries. Can be limited with data parameters (i.e. ljob s searchterm YYYYMM).
ljob mo yyyymm - generates and displays income report for month yyyymm, to date.
ljob yr yyyy - generates and displays income report for year yyyy, to date.
ljob xa - add an expense item (non-providers, i.e., utilities, travel, office supplies, etc.)
ljob xr - read expense report, limited with date parameters (ljob xr 201211 for expense report for Nov. 2012)
ljob up - list jobs as yet unpaid.
ljob us - list jobs with unsettled provider invoices.
ljob h - displays this help message."
else
if [[ $1 = pm ]] ; then
	xdate=$(date +%Y%m%d)
	read -p "Client: " client
	read -p "Project no.: " pno
	read -p "method (paypal, check): " method
	read -p "amount: " amount
	read -p "deductions: " deduct
	total=`echo "$amount-$deduct" | bc`
	echo "Date:	$xdate
Client:	$client
Project no.: 	$pno
Method:	$method
Amount:	$amount
Deductions:	$deduct
-------------------------------
Total:	$total" >> $filedate.pmt
else
if [[ $1 = xa ]]; then
	xdate=$(date +%Y%m%d)
	read -p "Paid to: (name of store, utility, etc.) " xto
	read -p "Type (office supplies, travel, utilities, rent, etc.) " xtype
	read -p "Description (more specific than type): " xdesc
	read -p "Amount: " xamt
	echo "Date	$xdate
Paid to	$xto
Type	$xtype
Description	$xdesc
Amount	$xamt" > $filedate.exp
echo "------------" >> $filedate.exp
else
if [[ $1 = pr ]]; then
	if [[ $2 ]]; then
		for ex in $(ls $2*.pmt); do
			grep Total: $ex | awk '{ print $2 }' >> $2.pmt
		done
		pays=0
		for pm in $(cat $2.pmt); do
			pays=`echo "$pays+$pm" | bc`
		done
		echo " Total payments for $2 = $pays" > $2.pmt
		cat $2*.pmt | less
		rm $2.pmt
	else
		echo "You neglected to provide data parameters. Try again."	
	fi
else
if [[ $1 = xr ]]; then
	if [[ $2 ]]; then
		for ex in $(ls $2*.exp); do
			grep Amount $ex | awk '{ print $2 }' >> $2.exp
		done
		xpns=0
		for xp in $(cat $2.exp); do
			xpns=`echo "$xpns+$xp" | bc`
		done
		echo " Total expense for $2 = $xpns" > $2.exp
		cat $2*.exp | less
		rm $2.exp
	else
		echo "You neglected to provide data parameters. Try again."	
	fi
else
if [[ $1 = l ]]; then
	if [[ $2 ]]; then
		ls -1t | grep $2
	else
		ls -1t
	fi
else
if [[ $1 = lr ]]; then
	if [[ $2 ]]; then
		ls -1t *.month | grep $2
		ls -1t *.year | grep $2
	else
		ls -1t *.month
		ls -1t *.year
	fi
else
if [[ $1 = lp ]]; then
	if [[ $2 ]]; then
		ls -1t *.pmt | grep $2
	else
		ls -1t *.pmt
	fi
else
if [[ $1 = lx ]]; then
	if [[ $2 ]]; then
		ls -1t *.exp | grep $2
	else
		ls -1t *.exp
	fi
else
if [[ $1 = lj ]]; then
	if [[ $2 ]]; then
		ls -1t *.ljob | grep $2
	else
		ls -1t *.ljob
	fi
else
if [[ $1 = lo ]]; then
	if [[ $2 ]]; then
		grep -P -i "outsourced\ty" * | grep $2
	else
		grep -P -i "outsourced\ty" *
	fi
else
if [[ $1 = s ]]; then
	if [[ $3 ]]; then
		grep -iw $2 * | grep $3
	else
	grep -iw $2 *
	fi
else
if [[ $1 = up ]]; then
	if [[ $2 ]];then 
		grep -iw UNPAID * | grep $2
	else
		grep -iw UNPAID *
	fi
else
if [[ $1 = us ]]; then
	if [[ $2 ]];then 
		grep -iw UNSETTLED * | grep $2
	else
		grep -iw UNSETTLED *
	fi
else
if [[ $1 = v ]]; then
	less $2
else
if [[ $1 = e ]]; then
	$editor $2
else
if [[ $1 = n ]]; then
	provs=n
	outs=y
	jdate=$(date +%Y%m%d)
	read -p "client ID: " client
	read -p "service: " service
	read -p "language(s): " langs
	read -p "volume: " volume
	read -p "unit: " units
	read -p "rate: " rate
	read -p "due (mm/dd HH:MM): " duedate
	read -p "outsourcing (y/n): " outs
	if [[ $outs == "y" ]]; then
	read -p "provider(s): " provs
	fi
	read -p "paidouts: " pdouts
	read -p "description: " desc
	grossin=`echo "$volume*$rate" | bc`
	netin=`echo "$grossin-$pdouts" | bc`
	if [[ $2 ]]; then
		jobname=$2.ljob
	else
		jobname=$filedate.$client.ljob	
	fi
	echo "projID	$client.$jdate
date in	$jdate
client	$client
service	$service
language(s)	$langs
volume	$volume
currency	$currency
rate	$rate / $units
grossincome	$grossin
paidouts	$pdouts
netincome	$netin
due date	$duedate
deliverydate	UNDELIVERED (update upon delivery)" > $jobname
if [[ $outs == "y" ]]; then
	echo "outsourced	$outs
providerspaid	UNSETTLED (update when provider invoices settled)
providers	$provs" >> $jobname
fi
echo "invoicepaidate	UNPAID (update upon receipt of payment)
---------------------------------------------------------------
description and notes:
$desc 
---------------------------------------------------------------
" >> $jobname
	echo "New job entered: 
---------------------------------------------------------------"
	 cat $jobname
	 read -p "Edit this job file? (y/n) " ednow
	 if [[ $ednow = y ]]; then
		 $editor $jobname
	fi
else
if [[ $1 = mo ]]; then
	if [ -e $2.month ]; then
		read -p "Report exists. View or Recreate? (v/r) " po0p
		if [ $po0p = v ]; then
			cat $2.month
			exit
		else 
			mv $2.month $2.month.bak
			mv $2.expense $2.expense.bak
			mv $2.payments $2.payments.bak
		fi
	fi
		gross=0
		paid=0
		neti=0
		xpns=0
		pays=0
		for job in $(ls $2*.ljob); do
			grep grossincome $job | awk '{ print $2 }' >> $2.gross
			grep paidouts $job | awk '{ print $2 }' >> $2.out
			grep netincome $job | awk '{ print $2 }' >> $2.net
		done
		for pt in $(ls $2*.pmt); do
			grep Total:  $pt | awk '{ print $2 }' >> $2.payments
		done
		for pm in $(cat $2.payments); do
			pays=`echo "$pays+$pm" | bc`
		done
		for ex in $(ls $2*.exp); do
			grep Amount $ex| awk '{ print $2 }' >> $2.expense
		done
		for xp in $(cat $2.expense); do
			xpns=`echo "$xpns+$xp" | bc`
		done
		for g in $(cat $2.gross); do
			gross=`echo "$gross+$g" | bc`
		done
		for pd in $(cat $2.out); do
			paid=`echo "$paid+$pd" | bc`
		done
		for ni in $(cat $2.net); do
			neti=`echo "$neti+$ni" | bc`
		done
			netminx=`echo "$neti-$xpns" | bc`
			repnet=`echo "$gross-$paid" | bc`
			toti=`echo "$pays-$xpns" | bc`
			echo "----- Monthly Income Report $2 -----" > $2.month
			echo "reported gross income for $2 = $currency $gross" >> $2.month
			echo "reported total paidouts for $2 = $currency $paid" >> $2.month
			echo "reported net income from ljobs $2 = $currency $neti" >> $2.month
			echo "Verification: $gross - $paid = $repnet" >> $2.month
			echo "This should be the same as $currency $neti." >> $2.month
			echo "-------------------------------------" >> $2.month
			echo "Expenses for $2 = $xpns" >> $2.month
			echo "Net invoices, after expenses, for $2 = $currency $netminx" >> $2.month
			echo "Payments received for $2 = $currency $pays" >> $2.month
			echo "Net income received after expenses = $pays - $xpns = $toti" >> $2.month
		rm $2.gross 
		rm $2.out 
		rm $2.net
		cat $2.month
		echo "report saved as $ljpath/$2.month"
else
if [[ $1 = yr ]]; then
	if [ -e $2.year ]; then
		read -p "Report exists. View or Recreate? (v/r) " po0p
		if [ $po0p = v ]; then
			cat $2.year
			exit
		else 
			mv $2.year $2.year.bak
			mv $2.expense $2.expense.bak
			mv $2.payments $2.payments.bak
		fi
	fi
		gross=0
		paid=0
		neti=0
		xpns=0
		pays=0
		for job in $(ls $2*.ljob); do
			grep grossincome $job | awk '{ print $2 }' >> $2.gross
			grep paidouts $job | awk '{ print $2 }' >> $2.out
			grep netincome $job | awk '{ print $2 }' >> $2.net
		done
		for pt in $(ls $2*.pmt); do
			grep Total:  $pt | awk '{ print $2 }' >> $2.payments
		done
		for pm in $(cat $2.payments); do
			pays=`echo "$pays+$pm" | bc`
		done
		for ex in $(ls $2*.exp); do
			grep Amount $ex | awk '{ print $2 }' >> $2.expense
		done
		for xp in $(cat $2.expense); do
			xpns=`echo "$xpns+$xp" | bc`
		done
		for g in $(cat $2.gross); do
			gross=`echo "$gross+$g" | bc`
		done
		for pd in $(cat $2.out); do
			paid=`echo "$paid+$pd" | bc`
		done
		for ni in $(cat $2.net); do
			neti=`echo "$neti+$ni" | bc`
		done
			netminx=`echo "$neti-$xpns" | bc`
			repnet=`echo "$gross-$paid" | bc`
			toti=`echo "$pays-$xpns" | bc`
			echo "----- Yearly Income Report $2 -----" > $2.year
			echo "reported gross invoices for $2 = $currency $gross" >> $2.year
			echo "reported total paidouts for $2 = $currency $paid" >> $2.year
			echo "reported net income from ljobs $2 = $currency $neti" >> $2.year
			echo "Verification: $gross - $paid = $currency $repnet" >> $2.year
			echo "This should be the same as $currency $neti." >> $2.year
			echo "----------------------------------" >> $2.year
			echo "Expenses paid for $2 = $currency $xpns" >> $2.year
			echo "Net invoices, after expenses, for $2 = $currency $netminx" >> $2.year
			echo "Payments received for $2 = $currency $pays" >> $2.year
			echo "Net income received after expenses = $pays - $xpns = $toti" >> $2.year
		rm $2.gross 
		rm $2.out 
		rm $2.net
		cat $2.year
		echo "report saved as $ljpath/$2.year"
fi
fi
fi	
fi	
fi
fi
fi
fi
fi
fi
fi
fi
fi
fi
fi
fi
fi
fi
fi
fi
fi
exit
